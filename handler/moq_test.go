// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler

import (
	"context"
	"shmz_book/entity"
	"sync"
)

// Ensure, that TaskListServiceMock does implement TaskListService.
// If this is not the case, regenerate this file with moq.
var _ TaskListService = &TaskListServiceMock{}

// TaskListServiceMock is a mock implementation of TaskListService.
//
//	func TestSomethingThatUsesTaskListService(t *testing.T) {
//
//		// make and configure a mocked TaskListService
//		mockedTaskListService := &TaskListServiceMock{
//			TaskListFunc: func(ctx context.Context) (entity.Tasks, error) {
//				panic("mock out the TaskList method")
//			},
//		}
//
//		// use mockedTaskListService in code that requires TaskListService
//		// and then make assertions.
//
//	}
type TaskListServiceMock struct {
	// TaskListFunc mocks the TaskList method.
	TaskListFunc func(ctx context.Context) (entity.Tasks, error)

	// calls tracks calls to the methods.
	calls struct {
		// TaskList holds details about calls to the TaskList method.
		TaskList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockTaskList sync.RWMutex
}

// TaskList calls TaskListFunc.
func (mock *TaskListServiceMock) TaskList(ctx context.Context) (entity.Tasks, error) {
	if mock.TaskListFunc == nil {
		panic("TaskListServiceMock.TaskListFunc: method is nil but TaskListService.TaskList was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockTaskList.Lock()
	mock.calls.TaskList = append(mock.calls.TaskList, callInfo)
	mock.lockTaskList.Unlock()
	return mock.TaskListFunc(ctx)
}

// TaskListCalls gets all the calls that were made to TaskList.
// Check the length with:
//
//	len(mockedTaskListService.TaskListCalls())
func (mock *TaskListServiceMock) TaskListCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockTaskList.RLock()
	calls = mock.calls.TaskList
	mock.lockTaskList.RUnlock()
	return calls
}

// Ensure, that AddTaskServiceMock does implement AddTaskService.
// If this is not the case, regenerate this file with moq.
var _ AddTaskService = &AddTaskServiceMock{}

// AddTaskServiceMock is a mock implementation of AddTaskService.
//
//	func TestSomethingThatUsesAddTaskService(t *testing.T) {
//
//		// make and configure a mocked AddTaskService
//		mockedAddTaskService := &AddTaskServiceMock{
//			AddTaskFunc: func(ctx context.Context, title string) (*entity.Task, error) {
//				panic("mock out the AddTask method")
//			},
//		}
//
//		// use mockedAddTaskService in code that requires AddTaskService
//		// and then make assertions.
//
//	}
type AddTaskServiceMock struct {
	// AddTaskFunc mocks the AddTask method.
	AddTaskFunc func(ctx context.Context, title string) (*entity.Task, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddTask holds details about calls to the AddTask method.
		AddTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Title is the title argument value.
			Title string
		}
	}
	lockAddTask sync.RWMutex
}

// AddTask calls AddTaskFunc.
func (mock *AddTaskServiceMock) AddTask(ctx context.Context, title string) (*entity.Task, error) {
	if mock.AddTaskFunc == nil {
		panic("AddTaskServiceMock.AddTaskFunc: method is nil but AddTaskService.AddTask was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Title string
	}{
		Ctx:   ctx,
		Title: title,
	}
	mock.lockAddTask.Lock()
	mock.calls.AddTask = append(mock.calls.AddTask, callInfo)
	mock.lockAddTask.Unlock()
	return mock.AddTaskFunc(ctx, title)
}

// AddTaskCalls gets all the calls that were made to AddTask.
// Check the length with:
//
//	len(mockedAddTaskService.AddTaskCalls())
func (mock *AddTaskServiceMock) AddTaskCalls() []struct {
	Ctx   context.Context
	Title string
} {
	var calls []struct {
		Ctx   context.Context
		Title string
	}
	mock.lockAddTask.RLock()
	calls = mock.calls.AddTask
	mock.lockAddTask.RUnlock()
	return calls
}
